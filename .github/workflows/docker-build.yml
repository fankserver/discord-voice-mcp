name: Docker Build and Push

on:
  push:
    branches:
      - main
      - feat/golang-rewrite
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        include:
          - dockerfile: Dockerfile
            suffix: ""
            platforms: linux/amd64,linux/arm64
          - dockerfile: Dockerfile.minimal
            suffix: "-minimal"
            platforms: linux/amd64,linux/arm64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && secrets.DOCKERHUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ secrets.DOCKERHUB_USERNAME != '' && format('docker.io/{0}/discord-voice-mcp', secrets.DOCKERHUB_USERNAME) || '' }}
          tags: |
            # For branches
            type=ref,event=branch,suffix=${{ matrix.suffix }}
            # For PRs
            type=ref,event=pr,suffix=${{ matrix.suffix }}
            # For tags
            type=ref,event=tag,suffix=${{ matrix.suffix }}
            # Latest tag for main branch
            type=raw,value=latest${{ matrix.suffix }},enable={{is_default_branch}}
            # Version tags
            type=semver,pattern={{version}},suffix=${{ matrix.suffix }}
            type=semver,pattern={{major}}.{{minor}},suffix=${{ matrix.suffix }}
            type=semver,pattern={{major}},suffix=${{ matrix.suffix }}
            # SHA
            type=sha,prefix={{branch}}-,suffix=${{ matrix.suffix }}
          flavor: |
            latest=false
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            COMMIT=${{ github.sha }}
            BUILD_DATE=${{ github.event.repository.updated_at }}

  build-binaries:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-x86-64-linux-gnu
      
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: ${{ matrix.goos == 'linux' && '1' || '0' }}
          CC: ${{ matrix.goarch == 'arm64' && 'aarch64-linux-gnu-gcc' || 'gcc' }}
        run: |
          output_name="discord-voice-mcp-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          
          if [ "${{ matrix.goos }}" = "linux" ]; then
            go build -a -tags netgo -ldflags '-w -s -extldflags "-static"' \
              -o "dist/${output_name}" ./cmd/discord-voice-mcp
          else
            go build -ldflags '-w -s' \
              -o "dist/${output_name}" ./cmd/discord-voice-mcp
          fi
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*
      
      - name: Upload to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Log in to Docker Hub
        if: secrets.DOCKERHUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Create and push manifest for normal image
        run: |
          # Extract the tag from the current ref
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${{ github.ref_name }}"
          elif [[ "${{ github.ref }}" == refs/heads/* ]]; then
            TAG="${{ github.ref_name }}"
          else
            TAG="latest"
          fi
          
          # Create manifest for GitHub Container Registry
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}-multiarch \
            --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}-linux-amd64 \
            --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}-linux-arm64
          
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}-multiarch
          
          # Create manifest for minimal image
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}-minimal-multiarch \
            --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}-minimal-linux-amd64 \
            --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}-minimal-linux-arm64
          
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}-minimal-multiarch