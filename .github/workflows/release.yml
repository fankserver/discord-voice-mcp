name: Release

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Log in to Docker Hub
        if: secrets.DOCKERHUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Build and push normal image
      - name: Build and push normal Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME != '' && format('docker.io/{0}/discord-voice-mcp:{1}', secrets.DOCKERHUB_USERNAME, github.event.release.tag_name) || '' }}
            ${{ secrets.DOCKERHUB_USERNAME != '' && format('docker.io/{0}/discord-voice-mcp:latest', secrets.DOCKERHUB_USERNAME) || '' }}
          labels: |
            org.opencontainers.image.title=Discord Voice MCP
            org.opencontainers.image.description=Discord voice channel transcription with MCP integration
            org.opencontainers.image.version=${{ github.event.release.tag_name }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Build and push minimal image
      - name: Build and push minimal Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.minimal
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}-minimal
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:minimal
            ${{ secrets.DOCKERHUB_USERNAME != '' && format('docker.io/{0}/discord-voice-mcp:{1}-minimal', secrets.DOCKERHUB_USERNAME, github.event.release.tag_name) || '' }}
            ${{ secrets.DOCKERHUB_USERNAME != '' && format('docker.io/{0}/discord-voice-mcp:minimal', secrets.DOCKERHUB_USERNAME) || '' }}
          labels: |
            org.opencontainers.image.title=Discord Voice MCP (Minimal)
            org.opencontainers.image.description=Minimal Discord voice MCP without ffmpeg
            org.opencontainers.image.version=${{ github.event.release.tag_name }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-binaries:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      
      - name: Install cross-compilation tools
        if: matrix.goos == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: ${{ matrix.goos == 'linux' && '1' || '0' }}
          CC: ${{ matrix.goarch == 'arm64' && 'aarch64-linux-gnu-gcc' || 'gcc' }}
        run: |
          output_name="discord-voice-mcp-${{ matrix.suffix }}"
          
          if [ "${{ matrix.goos }}" = "linux" ]; then
            go build -a -tags netgo \
              -ldflags "-w -s -extldflags '-static' -X main.Version=${{ github.event.release.tag_name }}" \
              -o "${output_name}" ./cmd/discord-voice-mcp
          else
            go build \
              -ldflags "-w -s -X main.Version=${{ github.event.release.tag_name }}" \
              -o "${output_name}" ./cmd/discord-voice-mcp
          fi
          
          # Create archive
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip "${output_name%.exe}.zip" "${output_name}"
          else
            tar -czf "${output_name}.tar.gz" "${output_name}"
          fi
      
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            discord-voice-mcp-${{ matrix.suffix }}*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}